rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Student Data Rules ---
    match /students/{scholarNum} {
      allow create: if request.auth != null
                          && request.resource.data.uid == request.auth.uid
                          && request.resource.id == request.resource.data.scholarNumber;
      allow read: if request.auth != null; // Allow any authenticated user to read student profiles (needed for claimer info)
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin());
    }

    match /students-by-uid/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && request.auth.uid == userId; // Allow reading own mapping
      allow update, delete: if false || isAdmin();
    }

    // --- Posts Rules ---
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
          (resource.data.authorId == request.auth.uid || isAdmin()) ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotesCount', 'downvotesCount']))
       );
      allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // --- Post Votes Rules ---
    match /post_votes/{voteId} {
      allow get: if request.auth != null && voteId.split('_')[0] == request.auth.uid;
      allow list: if request.auth != null && request.query.userId == request.auth.uid; // Use request.query.userId
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create, update: if request.auth != null
         && request.auth.uid == request.resource.data.userId
         && voteId == request.auth.uid + "_" + request.resource.data.postId;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // --- Favorite Posts Rules ---
    match /favoritePosts/{favoriteId} {
      allow get: if request.auth != null && favoriteId.split('_')[0] == request.auth.uid;
      allow list: if request.auth != null && request.query.userId == request.auth.uid; // Use request.query.userId
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null
         && request.auth.uid == request.resource.data.userId
         && favoriteId == request.auth.uid + "_" + request.resource.data.postId;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // --- Lost and Found Rules ---
    match /lostAndFound/{itemId} {
      // Allow any authenticated user to read any lost/found item.
      // Filtering for 'active' status happens client-side.
      allow read: if request.auth != null;

      // Allow authenticated users to create new lost/found items.
      // Additional validation (e.g., required fields) should happen client-side or via functions.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId;

      // Allow updates based on the action:
      // - Reporter can delete their own post.
      // - Reporter can confirm a claim (update status, confirmedClaimer, claimers).
      // - Any authenticated user can claim/unclaim (update claimers array).
      allow update: if request.auth != null && (
          // Reporter confirming a claim (changes status, confirmedClaimer, claimers)
          (resource.data.reporterId == request.auth.uid &&
           request.resource.data.status == 'inactive' && // Status must become inactive
           request.resource.data.confirmedClaimer is string && // confirmedClaimer must be set
           request.resource.data.claimers is list && request.resource.data.claimers.size() == 0 // Claimers must be cleared
          ) ||
          // Any user claiming/unclaiming (only affects 'claimers' array)
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['claimers']))
      );

      // Allow reporter to delete their own post.
      allow delete: if request.auth != null && resource.data.reporterId == request.auth.uid;
    }

    // Admin collection (example)
    match /admins/{userId} {
      allow read: if true; // Or restrict as needed
    }
  }

  // --- Helper Functions ---
  function isAdmin() {
    // Check if the requesting user's UID exists in the 'admins' collection
    // Ensure the 'admins' collection structure matches this check.
    return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    // Or, if using a field within the user's profile:
    // return get(/databases/$(database)/documents/students-by-uid/$(request.auth.uid)).data.isAdmin == true;
  }
}
