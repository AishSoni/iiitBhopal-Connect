rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check if the requesting user's UID exists in the 'admins' collection
      // Ensure you have an 'admins' collection where document IDs are user UIDs
      // and each document has an 'isAdmin: true' field.
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Function to check if the request only modifies specific fields
    function isUpdatingFields(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // --- Student Data Rules ---
    match /students/{scholarNum} {
      allow create: if isAuthenticated()
                          && request.resource.data.uid == request.auth.uid
                          && request.resource.id == request.resource.data.scholarNumber;
      allow read: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.uid || isAdmin());
    }

    match /students-by-uid/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated(); // Allow any authenticated user to read mappings (needed for profile lookups)
      allow update, delete: if false || isAdmin();
    }

    // --- Posts Rules ---
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Owner or admin can update any field. Anyone can update votes.
      allow update: if isAuthenticated() && (
          (resource.data.authorId == request.auth.uid || isAdmin()) ||
          isUpdatingFields(['upvotesCount', 'downvotesCount']) // Allow anyone to update vote counts
       );
      allow delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // --- Post Votes Rules ---
    match /post_votes/{voteId} {
      allow get: if isAuthenticated() && voteId.split('_')[0] == request.auth.uid;
      allow list: if isAuthenticated() && request.query.userId == request.auth.uid;
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create, update: if isAuthenticated()
         && request.auth.uid == request.resource.data.userId
         && voteId == request.auth.uid + "_" + request.resource.data.postId;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // --- Favorite Posts Rules ---
    match /favoritePosts/{favoriteId} {
      allow get: if isAuthenticated() && favoriteId.split('_')[0] == request.auth.uid;
      allow list: if isAuthenticated() && request.query.userId == request.auth.uid;
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated()
         && request.auth.uid == request.resource.data.userId
         && favoriteId == request.auth.uid + "_" + request.resource.data.postId;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // --- Lost and Found Rules ---
    match /lostAndFound/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reporterId;
      allow update: if isAuthenticated() && (
          // Owner confirms claim
          (resource.data.reporterId == request.auth.uid &&
           resource.data.type == 'found' && // Only found items can be confirmed
           request.resource.data.status == 'inactive' &&
           request.resource.data.confirmedClaimer is string &&
           request.resource.data.claimers is list && request.resource.data.claimers.size() == 0 &&
           isUpdatingFields(['status', 'confirmedClaimer', 'claimers'])
          ) ||
          // Any user claims/unclaims a found item
          (resource.data.type == 'found' && isUpdatingFields(['claimers'])) ||
          // Any user reports a lost item as found (updates lost item status)
          (resource.data.type == 'lost' &&
           resource.data.status == 'active' &&
           request.resource.data.status == 'inactive' &&
           isUpdatingFields(['status'])
          )
      );
      allow delete: if isAuthenticated() && resource.data.reporterId == request.auth.uid;
    }

    // --- Event Rules ---
    match /events/{eventId} {
      allow read: if isAuthenticated(); // Simplistic read for now, consider visibility later

      allow create: if isAuthenticated()
                      && request.auth.uid == request.resource.data.postedBy
                      // Add validation for required fields during creation
                      && request.resource.data.title is string && request.resource.data.title.size() > 0
                      && request.resource.data.description is string // Allow empty description if needed
                      && request.resource.data.venue is string && request.resource.data.venue.size() > 0
                      && request.resource.data.postedByName is string && request.resource.data.postedByName.size() > 0
                      && request.resource.data.postedByScholarNumber is string && request.resource.data.postedByScholarNumber.size() > 0
                      && request.resource.data.eventLink is string && request.resource.data.eventLink.size() > 0
                      && request.resource.data.numberOfRegistrations == 0
                      && request.resource.data.likes is list && request.resource.data.likes.size() == 0
                      && request.resource.data.dislikes is list && request.resource.data.dislikes.size() == 0
                      && request.resource.data.createdAt == request.time // Ensure createdAt is set by server
                      // Ensure visibility structure is correct
                      && request.resource.data.visibility.branches is list
                      && request.resource.data.visibility.yearsOfPassing is list
                      && request.resource.data.visibility.genders is list;


       // *** REVISED EVENT UPDATE RULE ***
       allow update: if isAuthenticated() && (
            // Condition 1: Owner updates allowed fields
            (
              request.auth.uid == resource.data.postedBy &&
              isUpdatingFields(['title', 'description', 'venue', 'location', 'startTime', 'endTime', 'poster', 'visibility'])
            )
            ||
            // Condition 2: Any authenticated user updates likes/dislikes
            isUpdatingFields(['likes', 'dislikes'])
            ||
            // Condition 3: Registration count updates (should ideally be transactional, but allow for now if needed)
            isUpdatingFields(['numberOfRegistrations'])
          );

      allow delete: if isAuthenticated()
                      && (resource.data.postedBy == request.auth.uid || isAdmin());

      // --- Event Registrations Subcollection ---
      match /registrations/{userId} {
        allow get: if isAuthenticated()
                     && (request.auth.uid == userId || isAdmin() || get(/databases/$(database)/documents/events/$(eventId)).data.postedBy == request.auth.uid);
        allow list: if isAuthenticated()
                      && (isAdmin() || get(/databases/$(database)/documents/events/$(eventId)).data.postedBy == request.auth.uid);
        allow create: if isAuthenticated()
                        && request.auth.uid == userId
                        && request.resource.data.uid == request.auth.uid
                        && request.resource.data.eventId == eventId
                        && request.resource.data.registrationTime == request.time; // Ensure timestamp set by server
        allow update: if false; // Prevent updates to registrations
        allow delete: if isAuthenticated() && request.auth.uid == userId; // Allow user to delete their own registration
      }
    }

    // --- Admin collection (example) ---
    match /admins/{userId} {
      allow read: if true; // Example: Allow anyone to read admin list (adjust as needed)
      allow write: if isAdmin(); // Example: Only admins can modify admin list
    }
  } // End match /databases/{database}/documents
} // End service cloud.firestore

    