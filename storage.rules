rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // --- Helper Functions (can't use functions directly like Firestore, but logic is similar) ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check admin status by attempting to read the admin document
    // Note: Storage rules cannot directly read Firestore. Admin checks must rely on
    // claims or client-side logic combined with Firestore rules for the *action*.
    // function isAdmin() { ... } // Cannot implement directly here

    // --- Lost and Found Image Rules ---
    match /lostAndFound/{userId}/{fileName} {
      allow read: if true; // Public read access for images
      allow create: if isAuthenticated() && request.auth.uid == userId // Allow user to upload to their own path
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images
      allow delete: if isAuthenticated() && request.auth.uid == userId; // Allow user to delete their own images
    }

    // --- Post Image Rules ---
    match /postImages/{userId}/{fileName} { // Changed path to include userId for security
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && request.auth.uid == userId // Only creator can upload
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images
      allow delete: if isAuthenticated() && request.auth.uid == userId; // Only creator can delete
    }

    // --- Event Poster Rules ---
    match /eventPosters/{eventId}/{fileName} {
      allow read: if true; // Public read access

      // CREATE: Allow authenticated users to upload new posters.
      allow create: if isAuthenticated()
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images

      // UPDATE: Disallowed, handled by delete + create.
      allow update: if false;

      // DELETE: Allow authenticated users to attempt deletion.
      // Firestore rules should verify ownership before allowing the document update that removes the URL.
      // Client-side code in `updateEvent` or a Cloud Function should verify ownership before calling `deleteObject`.
      allow delete: if isAuthenticated();
    }

    // --- Resume Rules ---
    match /resumes/{userId}/resume.pdf {
      // Allow reading only by the owner
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Allow create/update (write) only by the owner, check size and type
      allow write: if isAuthenticated()
                  && request.auth.uid == userId
                  && request.resource.size < 10 * 1024 * 1024 // 10MB limit
                  && request.resource.contentType == 'application/pdf';
      // Allow delete only by the owner
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

     // Default deny all other paths
     match /{allPaths=**} {
       allow read, write: if false;
     }
  }
}
