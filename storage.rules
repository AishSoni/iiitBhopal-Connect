rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // --- Helper Functions (can't use functions directly like Firestore, but logic is similar) ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check admin status by attempting to read the admin document
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Lost and Found Image Rules ---
    match /lostAndFound/{userId}/{fileName} {
      allow read: if true; // Public read access for images
      allow create: if isAuthenticated() && request.auth.uid == userId // Allow user to upload to their own path
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images
      allow delete: if isAuthenticated() && request.auth.uid == userId; // Allow user to delete their own images
    }

    // --- Post Image Rules ---
    match /postImages/{userId}/{fileName} { // Changed path to include userId for security
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && request.auth.uid == userId // Only creator can upload
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images
      allow delete: if isAuthenticated() && request.auth.uid == userId; // Only creator can delete
    }

    // --- Event Poster Rules ---
    match /eventPosters/{eventId}/{fileName} {
      allow read: if true; // Public read access

      // CREATE: Allow authenticated users to upload new posters.
      allow create: if isAuthenticated()
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*'); // Only images

      // UPDATE: Disallowed, handled by delete + create.
      allow update: if false;

      // DELETE: Allow event creator or admin to delete.
      allow delete: if isAuthenticated()
                    && (
                      // Fetch the event document from Firestore to check ownership
                      // Note: `get()` in storage rules is different from Firestore rules' `get()`
                      // It fetches the resource metadata, not a Firestore doc directly.
                      // We need to rely on the client ensuring the correct user calls delete,
                      // and Firestore rules prevent unauthorized *document* deletion.
                      // For strictness, deletion is best handled by a Cloud Function checking Firestore ownership.
                      // This rule allows any authenticated user to *attempt* delete,
                      // but the `updateEvent` function should verify ownership before calling deleteObject.
                      // A simpler, more common approach:
                       request.auth != null // Just ensure the user is logged in. Actual permission checked client-side/Firestore.
                      // Or, if you *must* check ownership here (less common, might require metadata):
                      // resource.metadata.ownerUid == request.auth.uid // Requires setting custom metadata on upload
                    );
    }

     // Default deny all other paths
     match /{allPaths=**} {
       allow read, write: if false;
     }
  }
}

    